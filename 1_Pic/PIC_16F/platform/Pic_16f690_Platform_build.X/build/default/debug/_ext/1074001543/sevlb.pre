
# 1 "D:/START_UP/COMPANY_STARTUP/3_platform_based_developments/pic16f690_projects/platform_pic16f690/platform/Pic_16f690_Platform_build.X/files/os/sevlb.c"

# 9 "D:/START_UP/COMPANY_STARTUP/3_platform_based_developments/pic16f690_projects/platform_pic16f690/platform/Pic_16f690_Platform_build.X/files/os/type_def.h"
typedef unsigned char _UBYTE;
typedef unsigned char _UINT8;
typedef signed char _SBYTE;
typedef signed char _SINT8;

typedef unsigned int _UINT16;
typedef signed int _SINT16;

typedef unsigned long int _UINT32;
typedef signed long int _SINT32;

# 6 "D:/START_UP/COMPANY_STARTUP/3_platform_based_developments/pic16f690_projects/platform_pic16f690/platform/Pic_16f690_Platform_build.X/files/os/sevlb_pub.h"
_UBYTE clear_bit_position(_UBYTE number1,_UBYTE bit_position);
_UBYTE set_bit_position(_UBYTE number1,_UBYTE bit_position);
_UBYTE update_bit_position(_UBYTE number1,_UBYTE bit_position,_UBYTE bit_value);
_UBYTE get_bit_value(_UBYTE number1,_UBYTE bit_position);
_UBYTE srvb_between(_SINT32 temp, _SINT32 num1, _SINT32 num2);
void num_to_string(_UBYTE number);
void delay_ms(_UINT16 delay_count);
_SINT8 srvb_add_s8_s16_s16(_SINT16 add1,_SINT16 add2);
_SINT16 srvb_add_s16_s16_s16(_SINT16 add1,_SINT16 add2);
_SINT8 srvb_sub_s8_s16_s16(_SINT16 sub1,_SINT16 sub2);

_UINT16 srvb_mul_div_u16_u16_u16_u16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1);

_UINT8 srvb_mul_div_u8_u16_u16_u16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1);

_SINT16 srvb_mul_div_s16_s16_s16_s16(_SINT32 mul1 ,_SINT32 mul2 ,_SINT16 div1);

_SINT8 srvb_mul_div_s8_s16_s16_s16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1);
_UBYTE hyst_delta_minus_s10s10s10u8(_SINT16 var_compare,_SINT16 var_max,_SINT16 var_min, _UBYTE * state_var);

# 9 "D:/START_UP/COMPANY_STARTUP/3_platform_based_developments/pic16f690_projects/platform_pic16f690/platform/Pic_16f690_Platform_build.X/files/os/sevlb.c"
_UBYTE clear_bit_position(_UBYTE number1,_UBYTE bit_position)
{
return(number1 & (~(0x01<<bit_position)));
}
_UBYTE set_bit_position(_UBYTE number1,_UBYTE bit_position)
{
return( number1 | (0x01<<bit_position) );
}
_UBYTE update_bit_position(_UBYTE number1,_UBYTE bit_position,_UBYTE bit_value)
{
return(bit_value?( number1 | (0x01<<bit_position) ):(number1 & (~(0x01<<bit_position))));
}
_UBYTE get_bit_value(_UBYTE number1,_UBYTE bit_position)
{
return((number1>>bit_position) & 0x01);
}


_UBYTE srvb_between(_SINT32 temp, _SINT32 num1, _SINT32 num2)
{
return(((temp>num1)&&(temp<num2))||((temp>num2)&&(temp<num1)));
}

void num_to_string(_UBYTE number)
{
static _UBYTE num_string[4]={'0','0','0',0};
_UBYTE count ,wrt_spac;
wrt_spac=1;
count = 2;

while (number>0)
{
num_string[count]=(number%10)+48;
number/=10;
if(count>0)
{
count--;
}
else
{
wrt_spac=0;
break;
}
}
while(wrt_spac&&(count!=0))
{
num_string[count]='0';
count--;
}
num_string[0]='0';
}


_SINT8 srvb_add_s8_s16_s16(_SINT16 add1,_SINT16 add2)
{
_SINT16 temp=0;
temp= add1 + add2;
if(srvb_between(temp,0x7F,0x7FFF))
{
return(0x7F);
}
else if(srvb_between(temp,0x80,0x8000))
{
return(0x80);
}
else
{
return ((_SINT8)temp);
}

}

_SINT16 srvb_add_s16_s16_s16(_SINT16 add1,_SINT16 add2)
{
_SINT16 temp=0;
temp= add1 + add2;
return ((_SINT16)temp);

}

_SINT8 srvb_sub_s8_s16_s16(_SINT16 sub1,_SINT16 sub2)
{
_SINT16 temp=0;
temp= sub1 - sub2;
if(srvb_between(temp,0x7F,0x7FFF))
{
return(0x7F);
}
else if(srvb_between(temp,0x80,0x8000))
{
return(0x80);
}
else
{
return ((_SINT8)temp);
}

}



_UINT16 srvb_mul_div_u16_u16_u16_u16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1)
{
_SINT32 temp=0;
if(div1)
{
temp=(mul1*mul2)/div1;
return(((temp>0xFFFF)?0xFFFF:(_UINT16)temp));
}
else
{
return(0);
}
}
_UINT8 srvb_mul_div_u8_u16_u16_u16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1)
{
_SINT32 temp=0;
if(div1)
{
temp=(mul1*mul2)/div1;
return(((temp>0xFF)?0xFF:(_UINT8)temp));
}
else
{
return(0);
}
}

_SINT16 srvb_mul_div_s16_s16_s16_s16(_SINT32 mul1 ,_SINT32 mul2 ,_SINT16 div1)
{
_SINT32 temp=0;
if(div1)
{
temp=(mul1*mul2)/div1;
if(srvb_between(temp,0x7FFF,0x7FFFFFFF))
{
return(0x7FFF);
}
else if(srvb_between(temp,0x8000,0x80000000))
{
return(0x8000);
}
else
{
return ((_SINT16)temp);
}
}
else
{
return(0);
}
}
_SINT8 srvb_mul_div_s8_s16_s16_s16(_UINT32 mul1 ,_UINT32 mul2 ,_UINT16 div1)
{
_SINT32 temp=0;
if(div1)
{
temp=(mul1*mul2)/div1;
if(srvb_between(temp,0x7F,0x7FFFFFFF))
{
return(0x7F);
}
else if(srvb_between(temp,0x80,0x80000000))
{
return(0x80);
}
else
{
return ((_SINT8)temp);
}
}
else
{
return(0);
}
}


_UBYTE hyst_delta_minus_s10s10s10u8(_SINT16 var_compare,_SINT16 var_max,_SINT16 var_min, _UBYTE * state_var)
{




if(*state_var)
{
if(var_compare > var_max)
{
*state_var=0;
}
else
{

}
}
else
{
if(var_compare < var_min)
{
*state_var=1;
}
else
{

}

}


return (* state_var);
}
void delay_ms(_UINT16 delay_count)
{
_UBYTE i;
while(delay_count)
{
for(i=0;i<224u;i++);

delay_count=delay_count-1;
}

}
